// Данные для информационных панелей
const categoryData = {
    html: {
        title: "HTML обработка",
        dev: [
            "Использование gulp-file-include для подключения частей HTML",
            "Префикс @@ для подключения компонентов",
            "Автоматическое обновление браузера через browserSync",
            "Только измененные файлы обрабатываются (gulp-changed)"
        ],
        build: [
            "Минификация HTML с помощью gulp-htmlclean",
            "Конвертация изображений в WebP с помощью gulp-webp-html",
            "Подключение компонентов через gulp-file-include",
            "Оптимизированная структура кода"
        ]
    },
    css: {
        title: "CSS & Preprocessors",
        dev: [
            "Компиляция SASS/SCSS в CSS с помощью gulp-sass и dart-sass",
            "Группировка медиа-запросов через gulp-group-css-media-queries",
            "Автоматическое обновление браузера при изменениях",
            "Обработка только измененных файлов (gulp-changed)"
        ],
        build: [
            "Компиляция SASS/SCSS в CSS",
            "Группировка медиа-запросов",
            "Минификация и оптимизация CSS с помощью gulp-csso",
            "Чистый, production-ready код"
        ]
    },
    fonts: {
        title: "Fonts",
        dev: [
            "Конвертация TTF в WOFF2 с помощью gulp-ttf2woff2",
            "Автоматическое обновление браузера при изменениях",
            "Обработка только измененных файлов (gulp-changed)",
            "Копирование в папку разработки"
        ],
        build: [
            "Конвертация TTF в современный формат WOFF2",
            "Оптимизация шрифтов для веба",
            "Копирование в финальную папку сборки"
        ]
    },
    files: {
        title: "Files",
        dev: [
            "Копирование статических файлов с сохранением структуры",
            "Обработка только измененных файлов (gulp-changed)",
            "Автоматическое обновление браузера через browserSync",
            "Поддержка любых типов файлов"
        ],
        build: [
            "Копирование всех статических файлов в финальную сборку",
            "Сохранение оригинальной структуры папок",
            "Подготовка к деплою на сервер"
        ]
    },
    images: {
        title: "Images",
        dev: [
            "Копирование изображений в папку разработки",
            "Обработка только измененных файлов (gulp-changed)",
            "Автоматическое обновление браузера при изменениях",
            "Быстрая обработка для разработки"
        ],
        build: [
            "Конвертация изображений в современный формат WebP (gulp-webp)",
            "Оптимизация и сжатие изображений через gulp-imagemin",
            "Создание дубликатов в оригинальном формате и WebP",
            "Детальный лог оптимизации (опция verbose: true)"
        ]
    },
    js: {
        title: "JavaScript",
        dev: [
            "Копирование JavaScript файлов в папку разработки",
            "Обработка только измененных файлов (gulp-changed)",
            "Автоматическое обновление браузера при изменениях",
            "Быстрая обработка для удобной разработки"
        ],
        build: [
            "Сборка и оптимизация JavaScript через Webpack",
            "Использование конфигурации из webpack.config.js",
            "Транспиляция современного JS для поддержки браузерами",
            "Минификация и объединение файлов"
        ]
    },
    clean: {
        title: "Clean",
        dev: [
            "Очистка папки разработки (dev) перед сборкой",
            "Проверка существования папки через fs.existsSync",
            "Принудительное удаление через gulp-clean {force: true}",
            "Защита от случайного удаления"
        ],
        build: [
            "Очистка финальной папки сборки (build) перед созданием новой",
            "Проверка существования папки через fs.existsSync",
            "Принудительное удаление через gulp-clean {force: true}",
            "Подготовка чистой папки для финальной сборки"
        ]
    },
    server: {
        title: "Server",
        dev: [
            "Запуск локального сервера для разработки через Browsersync",
            "Автоперезагрузка при изменениях файлов",
            "Базовая директория: ./dist",
            "Порт: 3000",
            "Автоматическое открытие браузера"
        ],
        build: [
            "Запуск сервера для демонстрации финальной сборки",
            "Базовая директория: ./build",
            "Порт: 3000",
            "Автоматическое открытие браузера",
            "Демонстрация готового проекта заказчику"
        ]
    },
    watch: {
        title: "Watch",
        dev: [
            "Отслеживание изменений SCSS файлов и автоматическая компиляция",
            "Отслеживание изменений HTML и автоматическая обработка",
            "Отслеживание изменений изображений и автоматическое копирование",
            "Отслеживание изменений файлов и автоматическое копирование",
            "Отслеживание изменений JS и автоматическая обработка",
            "Полный автоматический процесс разработки"
        ],
        build: [
            "Режим watch обычно не используется в build-версии",
            "Сборка выполняется один раз для финального результата",
            "Может быть настроена для отслеживания изменений в исходниках"
        ]
    }
};

// Обработчики событий для кнопок
document.querySelectorAll('.category-btn').forEach(button => {
    button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        showCategoryInfo(category);
    });
});

// Функция для отображения информации о категории
function showCategoryInfo(category) {
    const panel = document.getElementById('info-panel');
    const data = categoryData[category];

    if (!data) return;

    panel.innerHTML = `
                <h2>${data.title}</h2>
                <div class="info-content">
                    <div class="dev-version">
                        <h3>DEV версия <span class="version-badge dev-badge">development</span></h3>
                        <ul>
                            ${data.dev.map(item => `<li>${item}</li>`).join('')}
                        </ul>
                    </div>
                    <div class="build-version">
                        <h3>BUILD версия <span class="version-badge build-badge">production</span></h3>
                        <ul>
                            ${data.build.map(item => `<li>${item}</li>`).join('')}
                        </ul>
                    </div>
                </div>
            `;

    panel.classList.add('active');

    // Прокрутка к панели с информацией
    panel.scrollIntoView({ behavior: 'smooth' });
}